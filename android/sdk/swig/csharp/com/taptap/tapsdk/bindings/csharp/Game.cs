//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace com.taptap.tapsdk.bindings.csharp {

public class Game : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Game(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Game obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Game() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          TapSDKPINVOKE.delete_Game(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void SetCurrent(Game game) {
    TapSDKPINVOKE.Game_SetCurrent(Game.getCPtr(game));
    if (TapSDKPINVOKE.SWIGPendingException.Pending) throw TapSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Game GetCurrent() {
    global::System.IntPtr cPtr = TapSDKPINVOKE.Game_GetCurrent();
    Game ret = (cPtr == global::System.IntPtr.Zero) ? null : new Game(cPtr, true);
    return ret;
  }

  public Game(string uuid) : this(TapSDKPINVOKE.new_Game(uuid), true) {
    if (TapSDKPINVOKE.SWIGPendingException.Pending) throw TapSDKPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual string GetUUID() {
    string ret = (SwigDerivedClassHasMethod("GetUUID", swigMethodTypes0) ? TapSDKPINVOKE.Game_GetUUIDSwigExplicitGame(swigCPtr) : TapSDKPINVOKE.Game_GetUUID(swigCPtr));
    if (TapSDKPINVOKE.SWIGPendingException.Pending) throw TapSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ulong GetGameID() {
    ulong ret = (SwigDerivedClassHasMethod("GetGameID", swigMethodTypes1) ? TapSDKPINVOKE.Game_GetGameIDSwigExplicitGame(swigCPtr) : TapSDKPINVOKE.Game_GetGameID(swigCPtr));
    if (TapSDKPINVOKE.SWIGPendingException.Pending) throw TapSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetPackageName() {
    string ret = (SwigDerivedClassHasMethod("GetPackageName", swigMethodTypes2) ? TapSDKPINVOKE.Game_GetPackageNameSwigExplicitGame(swigCPtr) : TapSDKPINVOKE.Game_GetPackageName(swigCPtr));
    if (TapSDKPINVOKE.SWIGPendingException.Pending) throw TapSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetUUID", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGame_0(SwigDirectorMethodGetUUID);
    if (SwigDerivedClassHasMethod("GetGameID", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGame_1(SwigDirectorMethodGetGameID);
    if (SwigDerivedClassHasMethod("GetPackageName", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGame_2(SwigDirectorMethodGetPackageName);
    TapSDKPINVOKE.Game_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(Game))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private string SwigDirectorMethodGetUUID() {
    return GetUUID();
  }

  private ulong SwigDirectorMethodGetGameID() {
    return GetGameID();
  }

  private string SwigDirectorMethodGetPackageName() {
    return GetPackageName();
  }

  public delegate string SwigDelegateGame_0();
  public delegate ulong SwigDelegateGame_1();
  public delegate string SwigDelegateGame_2();

  private SwigDelegateGame_0 swigDelegate0;
  private SwigDelegateGame_1 swigDelegate1;
  private SwigDelegateGame_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
}

}
