#pragma once

#include <bit>

namespace std {

template <class To, class From>
To bit_cast(const From& src) noexcept {
    To dst;
    std::memcpy(&dst, &src, sizeof(To));
    return dst;
}

template <typename T>
constexpr T bit_width(T x) noexcept {
    return std::numeric_limits<T>::digits - std::__countl_zero(x);
}

template <typename T>
constexpr bool has_single_bit(T x) noexcept {
    return std::popcount(x) == 1;
}

} // namespace std